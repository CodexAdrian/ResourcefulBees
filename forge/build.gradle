plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "resourcefulbees.mixins.json"
        mixinConfig "resourcefulbees-common.mixins.json"

        dataGen {
            mod "resourcefulbees"
        }
    }

    runs {
        data {
            programArgs "--existing", project(":forge").file("src/main/resources").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:$mc_version-$forge_version"
    modImplementation "com.teamresourceful.resourcefullib:resourcefullib-$project.name-$mc_version:$rlib_version"
    modImplementation "com.teamresourceful.resourcefulconfig:resourcefulconfig-$project.name-$mc_version:$rconfig_version"
    modImplementation "software.bernie.geckolib:$geckolib_forge:$geckolib_version"
    modImplementation "com.telepathicgrunt:Bumblezone-Forge:$bumblezone_version"
    modImplementation "net.roguelogix.phosphophyllite:Phosphophyllite:$phos_version"
    modCompileOnly "mezz.jei:jei-$mc_version-forge-api:$jei_version"
    modLocalRuntime "mezz.jei:jei-$mc_version-forge:$jei_version" transitive false
    modCompileOnly "mcjty.theoneprobe:theoneprobe:$top_version:api" transitive false
    modLocalRuntime "mcjty.theoneprobe:theoneprobe:$top_version" transitive false
    modLocalRuntime "com.telepathicgrunt:CommandStructures-Forge:$cstructures_version"

    common(project(path: ":common", configuration: "namedElements")) transitive false
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) transitive false

    compileOnly 'org.jetbrains:annotations:24.0.1'
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
}

processResources {

    def versionProperties = [
            "version": version,
            "fml_version": forge_version.substring(0, forge_version.indexOf('.')),
            "forge_version": forge_version,
            "mc_version": mc_version,
            "phos_version": phos_version,
            "gecko_version": geckolib_version,
            "rlib_version": rlib_version,
            "rconfig_version": rconfig_version
    ]

    inputs.properties versionProperties

    filesMatching("META-INF/mods.toml") {
        expand(versionProperties)
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveAppendix.set "$project.name-$mc_version"
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveAppendix.set "$project.name-$mc_version"
    archiveClassifier.set null
}

jar {
    archiveAppendix.set "$project.name-$mc_version"
    archiveClassifier.set "dev"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
