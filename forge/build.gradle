plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

sourceSets {
    main {
        resources {
            srcDirs += project(":forge").file('src/generated/resources').absolutePath
            exclude '.cache'
        }
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "resourcefulbees.mixins.json"
        mixinConfig "resourcefulbees-common.mixins.json"

        dataGen {
            mod "resourcefulbees"
        }
    }

    runs {
        data {
            programArgs "--existing", project(":forge").file("src/main/resources").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    modImplementation("com.teamresourceful.resourcefullib:resourcefullib-forge-$rootProject.minecraft_version:$rootProject.resourcefullib_version")
    modImplementation("com.teamresourceful.resourcefulconfig:resourcefulconfig-forge-$rootProject.minecraft_version:$rootProject.resourcefulconfig_version")

    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-forge-api:${rootProject.jei_version}")
    modLocalRuntime("mezz.jei:jei-${rootProject.minecraft_version}-forge:${rootProject.jei_version}") {
        transitive = false
    }

    modCompileOnly("mcjty.theoneprobe:theoneprobe:${rootProject.top_version}:api"){
        transitive = false
    }
    modRuntimeOnly("mcjty.theoneprobe:theoneprobe:${rootProject.top_version}"){
        transitive = false
    }

    modImplementation "software.bernie.geckolib:${rootProject.geckolib_forge}:${rootProject.geckolib_forge_version}"

    modImplementation("com.telepathicgrunt:Bumblezone-Forge:$bumblezone_version")

    modCompileOnly("net.roguelogix.phosphophyllite:Phosphophyllite:$phos_version")
    modRuntimeOnly("net.roguelogix.phosphophyllite:Phosphophyllite:$phos_version")

    modLocalRuntime("com.telepathicgrunt:CommandStructures-Forge:3.1.0+1.19")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    compileOnly 'org.jetbrains:annotations:23.0.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def versionProperties = [
            "version": version,
            "fml_version": forge_version.substring(0, forge_version.indexOf('.')),
            "forge_version": forge_version,
            "mc_version": minecraft_version,
            "phos_version": phos_version,
            "gecko_version": geckolib_forge_version,
            "rlib_version": resourcefullib_version,
            "rconfig_version": resourcefulconfig_version
    ]

    inputs.properties versionProperties

    filesMatching("META-INF/mods.toml") {
        expand(versionProperties)
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveAppendix.set "${project.name}-$minecraft_version"
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveAppendix.set "${project.name}-$minecraft_version"
    archiveClassifier.set null
}

jar {
    archiveAppendix.set "${project.name}-$minecraft_version"
    archiveClassifier.set "dev"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = "${rootProject.archives_base_name}-${project.name}-${rootProject.minecraft_version}"
            from components.java

            pom {
                name = 'ResourcefulBees'
                description = 'A mod for minecraft to add own bees to minecraft through a powerful api.'
                url = 'https://github.com/Resourceful-Bees/ResourcefulBees'

                scm {
                    connection = 'git:https://github.com/Resourceful-Bees/ResourcefulBees.git'
                    developerConnection = 'git:https://github.com/Resourceful-Bees/ResourcefulBees.git'
                    url = 'https://github.com/Resourceful-Bees/ResourcefulBees/'
                }

                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://raw.githubusercontent.com/Resourceful-Bees/ResourcefulBees/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'epic428'
                        name = 'Epic_Oreo'
                        email = 'admin@resourcefulbees.com'
                    }
                    developer {
                        id = 'thatgravyboat'
                        name = 'ThatGravyBoat'
                        email = 'admin@resourcefulbees.com'
                    }
                    developer {
                        id = 'dawn_felstar'
                        name = 'Dawn Felstar'
                        email = 'admin@resourcefulbees.com'
                    }
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            url = repoUrl
            credentials {
                username ENV.MAVEN_USER
                password ENV.MAVEN_PASS
            }
        }
    }
}
