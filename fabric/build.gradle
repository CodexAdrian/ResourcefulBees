plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

sourceSets {
    main {
        resources {
            srcDirs += project(":forge").file("src/generated/resources").absolutePath
            exclude '.cache'
        }
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"

    modImplementation "com.teamresourceful.resourcefullib:resourcefullib-$project.name-$mc_version:$rlib_version"
    compileOnly "com.teamresourceful:yabn:1.0.3"
    modImplementation "com.teamresourceful.resourcefulconfig:resourcefulconfig-$project.name-1.20:$rconfig_version"
    modCompileOnly "software.bernie.geckolib:$geckolib_fabric:$geckolib_version"
    modCompileOnly "com.telepathicgrunt:Bumblezone-Fabric:$bumblezone_version" transitive false
    modCompileOnly "mezz.jei:jei-$mc_version-fabric-api:$jei_version"
    modLocalRuntime "mezz.jei:jei-$mc_version-fabric:$jei_version" transitive false

    common(project(path: ":common", configuration: "namedElements")) transitive false
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) transitive false
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
    archiveAppendix.set "$project.name-$mc_version"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
    archiveAppendix.set "$project.name-$mc_version"
}

jar {
    archiveClassifier.set "dev"
    archiveAppendix.set "$project.name-$mc_version"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}